# Dockerfile
ARG BASE_IMAGE

FROM zabbix/zabbix-server-mysql:${ZB_TAG_SRV}

LABEL version="1.0.0" description="Zabbix & Grafana Docker Compose" maintainer="Alan Martines<alancpmartines@hotmail.com>"

RUN apt-get update && \
	apt-get upgrade -y && \
	apt-get install -y && \
	sudo \
	build-essential \
	zlib1g-dev \
	libncurses5-dev \
	libgdbm-dev \
	libnss3-dev \
	libssl-dev \
	libreadline-dev \
	libffi-dev wget \
	python3 \
	python3-pip && \
	apt-get autoremove -y

RUN rm /usr/lib/python*/EXTERNALLY-MANAGED

RUN cd ~ && \
	wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
	apt-get install -y ./google-chrome-stable_current_amd64.deb && \
	google-chrome --version && \
	apt-get autoremove -y

RUN pip3 install bs4 && \
	pip3 install bs4; \
	pip3 install requests; \
	pip3 install cloudscraper; \
	pip3 install cfscrape; \
	pip3 install requests six; \
	pip3 install beautifulsoup4==4.9.0; \
	pip3 install certifi==2020.4.5.1; \
	pip3 install chardet==3.0.4; \
	pip3 install cloudscraper==1.2.33; \
	pip3 install idna==2.9; \
	pip3 install requests-toolbelt==0.9.1; \
	pip3 install soupsieve==2.0; \
	pip3 install urllib3==1.25.9; \
	pip3 install --upgrade urllib3 chardet requests; \
	pip3 install selenium; \
	pip3 install webdriver-manager; \
	pip3 install --upgrade urllib3 chardet requests

EXPOSE 10051/TCP

CMD ["/usr/sbin/zabbix_server", "--foreground", "-c", "/etc/zabbix/zabbix_server.conf"]

## Acessar bash do container
# docker exec -it <container id> /bin/sh
# docker exec -it <container id> /bin/bash

## Logs do container
# docker logs -f --tail 1000 ApiWPPconnect

## Removendo todos os containers e imagens de uma só vez
# docker rm $(docker ps -qa)

## Removendo todas as imagens de uma só vez
# docker rmi $(docker images -aq)

## Removendo imagens
# docker rmi <REPOSITORY>
# docker rmi <IMAGE ID>

## Como obter o endereço IP de um contêiner Docker do host
# https://stack.desenvolvedor.expert/appendix/docker/rede.html
# docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <IMAGE ID>